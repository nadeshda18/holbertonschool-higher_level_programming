#Test cases or 2-matrix_divided.py

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided((1, 3), 7)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided((1, 3), 7)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "hey")
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided((1, 3), 7)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, 3], [4, 5, 6]])
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
>>> matrix_divided([[1, "hi", 3], [4, 5, 6]], 6)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix = [[1, 2, 3], [4]]
>>> print(matrix_divided(matrix, 2))
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
>>> matrix = [[1, 2], [3, 4]]
>>> print(matrix_divided(matrix))
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
